/**
 * 圖片浮水印工具 - 主要應用程式邏輯
 */

// 應用程式狀態管理
class WatermarkApp {
    constructor() {
        this.imageData = null;
        this.canvas = null;
        this.context = null;
        this.watermarkConfig = {
            type: 'preset',
            text: '僅供身分驗證使用',
            presetType: 'taiwan-id',
            position: 'bottom-right',
            opacity: 0.5,
            fontSize: 24,
            color: '#ff0000',
            x: 0,
            y: 0
        };
        this.zoomLevel = 1;
        this.minZoom = 0.1;
        this.maxZoom = 3;
        this.isEmbedded = window.self !== window.top;
        
        // 拖拽狀態管理
        this.isDragging = false;
        this.dragStartX = 0;
        this.dragStartY = 0;
        this.dragOffsetX = 0;
        this.dragOffsetY = 0;
        this.watermarkBounds = { x: 0, y: 0, width: 0, height: 0 };
        
        this.init();
    }

    /**
     * 初始化應用程式
     */
    init() {
        this.setupEventListeners();
        this.setupResponsiveHandlers();
        this.checkEmbeddedMode();
        this.initializePresetOptions();
        this.loadUserPreferences();
        console.log('圖片浮水印工具已初始化');
    }

    /**
     * 設定事件監聽器
     */
    setupEventListeners() {
        // DOM 元素引用
        this.elements = {
            fileInput: document.getElementById('file-input'),
            uploadSection: document.getElementById('upload-section'),
            controlPanel: document.getElementById('control-panel'),
            previewArea: document.getElementById('preview-area'),
            previewCanvas: document.getElementById('preview-canvas'),
            loadingSpinner: document.getElementById('loading-spinner'),
            
            // 控制項
            watermarkTypeRadios: document.querySelectorAll('input[name="watermark-type"]'),
            presetOptions: document.getElementById('preset-options'),
            customOptions: document.getElementById('custom-options'),
            presetSelect: document.getElementById('preset-select'),
            customText: document.getElementById('custom-text'),
            
            // 樣式控制
            opacityRange: document.getElementById('opacity-range'),
            opacityValue: document.getElementById('opacity-value'),
            fontsizeRange: document.getElementById('fontsize-range'),
            fontsizeValue: document.getElementById('fontsize-value'),
            
            // 位置控制
            positionRadios: document.querySelectorAll('input[name="position"]'),
            
            // 操作按鈕
            downloadBtn: document.getElementById('download-btn')
        };

        // 檔案上傳事件
        this.elements.fileInput.addEventListener('change', (e) => this.handleFileSelect(e));
        this.elements.uploadSection.addEventListener('click', () => this.elements.fileInput.click());
        
        // 拖放事件
        this.setupDragAndDrop();
        
        // 浮水印類型切換
        this.elements.watermarkTypeRadios.forEach(radio => {
            radio.addEventListener('change', (e) => this.handleWatermarkTypeChange(e));
        });
        
        // 預設類型選擇
        this.elements.presetSelect.addEventListener('change', (e) => this.handlePresetChange(e));
        
        // 自訂文字輸入 - 多種事件監聽
        this.elements.customText.addEventListener('input', (e) => this.handleCustomTextChange(e));
        this.elements.customText.addEventListener('blur', (e) => this.handleCustomTextBlur(e));
        this.elements.customText.addEventListener('focus', (e) => this.handleCustomTextFocus(e));
        this.elements.customText.addEventListener('keydown', (e) => this.handleCustomTextKeydown(e));
        
        // 樣式控制
        this.elements.opacityRange.addEventListener('input', (e) => this.handleOpacityChange(e));
        this.elements.fontsizeRange.addEventListener('input', (e) => this.handleFontsizeChange(e));
        
        // 位置控制
        this.elements.positionRadios.forEach(radio => {
            radio.addEventListener('change', (e) => this.handlePositionChange(e));
        });
        
        // 下載按鈕
        this.elements.downloadBtn.addEventListener('click', () => this.downloadImage());
        
        console.log('事件監聽器設定完成');
    }

    /**
     * 設定浮水印拖拽功能
     */
    setupWatermarkDrag() {
        if (!this.canvas) return;

        // 滑鼠事件
        this.canvas.addEventListener('mousedown', (e) => this.handleDragStart(e));
        this.canvas.addEventListener('mousemove', (e) => this.handleDragMove(e));
        this.canvas.addEventListener('mouseup', (e) => this.handleDragEnd(e));
        this.canvas.addEventListener('mouseleave', (e) => this.handleDragEnd(e));

        // 觸控事件
        this.canvas.addEventListener('touchstart', (e) => this.handleTouchStart(e), { passive: false });
        this.canvas.addEventListener('touchmove', (e) => this.handleTouchMove(e), { passive: false });
        this.canvas.addEventListener('touchend', (e) => this.handleTouchEnd(e));
        this.canvas.addEventListener('touchcancel', (e) => this.handleTouchEnd(e));

        console.log('浮水印拖拽功能已設定');
    }

    /**
     * 處理拖拽開始 (滑鼠)
     */
    handleDragStart(e) {
        e.preventDefault();
        
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // 檢查是否點擊在浮水印區域內
        if (this.isPointInWatermark(x, y)) {
            this.isDragging = true;
            this.dragStartX = x;
            this.dragStartY = y;
            this.dragOffsetX = x - this.watermarkConfig.x;
            this.dragOffsetY = y - this.watermarkConfig.y;
            
            // 顯示拖拽視覺回饋
            this.showDragVisualFeedback();
            
            console.log('開始拖拽浮水印:', { x, y });
        }
    }

    /**
     * 處理拖拽移動 (滑鼠)
     */
    handleDragMove(e) {
        if (!this.isDragging) {
            // 檢查是否懸停在浮水印上，更新游標
            const rect = this.canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            
            if (this.isPointInWatermark(x, y)) {
                this.canvas.style.cursor = 'grab';
            } else {
                this.canvas.style.cursor = 'crosshair';
            }
            return;
        }

        e.preventDefault();
        
        const rect = this.canvas.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        // 計算新位置並應用邊界限制
        const newX = x - this.dragOffsetX;
        const newY = y - this.dragOffsetY;
        
        const constrainedPosition = this.constrainWatermarkPosition(newX, newY);
        
        // 更新浮水印位置
        this.watermarkConfig.x = constrainedPosition.x;
        this.watermarkConfig.y = constrainedPosition.y;
        
        // 更新拖拽視覺回饋
        this.updateDragFeedback(constrainedPosition.x, constrainedPosition.y);
        
        // 更新預覽
        this.updatePreview();
    }

    /**
     * 處理拖拽結束 (滑鼠)
     */
    handleDragEnd(e) {
        if (this.isDragging) {
            this.isDragging = false;
            
            // 隱藏拖拽視覺回饋
            this.hideDragVisualFeedback();
            
            // 顯示拖拽完成回饋
            this.showDragCompleteFeedback();
            
            // 儲存使用者偏好
            this.saveUserPreferences();
            
            console.log('拖拽結束，浮水印位置:', { 
                x: this.watermarkConfig.x, 
                y: this.watermarkConfig.y 
            });
        }
    }

    /**
     * 處理觸控開始
     */
    handleTouchStart(e) {
        e.preventDefault();
        
        if (e.touches.length !== 1) return;
        
        const touch = e.touches[0];
        const rect = this.canvas.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const y = touch.clientY - rect.top;
        
        // 檢查是否觸控在浮水印區域內
        if (this.isPointInWatermark(x, y)) {
            this.isDragging = true;
            this.dragStartX = x;
            this.dragStartY = y;
            this.dragOffsetX = x - this.watermarkConfig.x;
            this.dragOffsetY = y - this.watermarkConfig.y;
            
            // 顯示拖拽視覺回饋（觸控版本）
            this.showDragVisualFeedback();
            
            console.log('開始觸控拖拽浮水印:', { x, y });
        }
    }

    /**
     * 處理觸控移動
     */
    handleTouchMove(e) {
        if (!this.isDragging || e.touches.length !== 1) return;
        
        e.preventDefault();
        
        const touch = e.touches[0];
        const rect = this.canvas.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const y = touch.clientY - rect.top;
        
        // 計算新位置並應用邊界限制
        const newX = x - this.dragOffsetX;
        const newY = y - this.dragOffsetY;
        
        const constrainedPosition = this.constrainWatermarkPosition(newX, newY);
        
        // 更新浮水印位置
        this.watermarkConfig.x = constrainedPosition.x;
        this.watermarkConfig.y = constrainedPosition.y;
        
        // 更新拖拽視覺回饋
        this.updateDragFeedback(constrainedPosition.x, constrainedPosition.y);
        
        // 更新預覽
        this.updatePreview();
    }

    /**
     * 處理觸控結束
     */
    handleTouchEnd(e) {
        if (this.isDragging) {
            this.isDragging = false;
            
            // 隱藏拖拽視覺回饋
            this.hideDragVisualFeedback();
            
            // 顯示拖拽完成回饋
            this.showDragCompleteFeedback();
            
            // 儲存使用者偏好
            this.saveUserPreferences();
            
            console.log('觸控拖拽結束，浮水印位置:', { 
                x: this.watermarkConfig.x, 
                y: this.watermarkConfig.y 
            });
        }
    }

    /**
     * 檢查點是否在浮水印區域內
     */
    isPointInWatermark(x, y) {
        if (!this.watermarkBounds || this.watermarkBounds.width === 0) {
            return false;
        }
        
        return x >= this.watermarkBounds.x && 
               x <= this.watermarkBounds.x + this.watermarkBounds.width &&
               y >= this.watermarkBounds.y && 
               y <= this.watermarkBounds.y + this.watermarkBounds.height;
    }

    /**
     * 約束浮水印位置在邊界內
     */
    constrainWatermarkPosition(x, y) {
        if (!this.canvas || !this.watermarkBounds) {
            return { x, y };
        }
        
        const canvasWidth = this.canvas.width;
        const canvasHeight = this.canvas.height;
        const watermarkWidth = this.watermarkBounds.width;
        const watermarkHeight = this.watermarkBounds.height;
        
        // 邊界限制
        const minX = 0;
        const maxX = canvasWidth - watermarkWidth;
        const minY = 0;
        const maxY = canvasHeight - watermarkHeight;
        
        const constrainedX = Math.max(minX, Math.min(maxX, x));
        const constrainedY = Math.max(minY, Math.min(maxY, y));
        
        return { x: constrainedX, y: constrainedY };
    }

    /**
     * 更新浮水印邊界資訊
     */
    updateWatermarkBounds(x, y, width, height) {
        this.watermarkBounds = { x, y, width, height };
    }

    /**
     * 顯示拖拽視覺回饋
     */
    showDragVisualFeedback() {
        if (!this.canvas) return;

        // 添加拖拽樣式類
        this.canvas.classList.add('dragging');
        document.body.classList.add('dragging');
        
        // 更新游標樣式
        this.canvas.style.cursor = 'grabbing';
        
        // 添加拖拽邊界指示器
        this.showDragBoundaryIndicator();
        
        // 添加拖拽提示
        this.showDragHint();
        
        console.log('拖拽視覺回饋已啟用');
    }

    /**
     * 隱藏拖拽視覺回饋
     */
    hideDragVisualFeedback() {
        if (!this.canvas) return;

        // 移除拖拽樣式類
        this.canvas.classList.remove('dragging');
        document.body.classList.remove('dragging');
        
        // 恢復游標樣式
        this.canvas.style.cursor = 'crosshair';
        
        // 隱藏拖拽邊界指示器
        this.hideDragBoundaryIndicator();
        
        // 隱藏拖拽提示
        this.hideDragHint();
        
        console.log('拖拽視覺回饋已停用');
    }

    /**
     * 顯示拖拽邊界指示器
     */
    showDragBoundaryIndicator() {
        const previewArea = this.elements.previewArea;
        if (!previewArea || !this.watermarkBounds) return;

        let indicator = previewArea.querySelector('.drag-boundary-indicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.className = 'drag-boundary-indicator';
            previewArea.appendChild(indicator);
        }

        // 計算指示器位置和大小
        const canvasRect = this.canvas.getBoundingClientRect();
        const previewRect = previewArea.getBoundingClientRect();
        
        const relativeX = canvasRect.left - previewRect.left + this.watermarkBounds.x;
        const relativeY = canvasRect.top - previewRect.top + this.watermarkBounds.y;
        
        indicator.style.left = `${relativeX}px`;
        indicator.style.top = `${relativeY}px`;
        indicator.style.width = `${this.watermarkBounds.width}px`;
        indicator.style.height = `${this.watermarkBounds.height}px`;
        indicator.style.opacity = '1';
    }

    /**
     * 隱藏拖拽邊界指示器
     */
    hideDragBoundaryIndicator() {
        const indicator = this.elements.previewArea.querySelector('.drag-boundary-indicator');
        if (indicator) {
            indicator.style.opacity = '0';
            setTimeout(() => {
                if (indicator.parentNode) {
                    indicator.remove();
                }
            }, 300);
        }
    }

    /**
     * 顯示拖拽提示
     */
    showDragHint() {
        const previewArea = this.elements.previewArea;
        if (!previewArea) return;

        let dragHint = previewArea.querySelector('.drag-hint');
        if (!dragHint) {
            dragHint = document.createElement('div');
            dragHint.className = 'drag-hint position-absolute';
            dragHint.style.cssText = `
                top: 10px;
                left: 10px;
                background: rgba(13, 110, 253, 0.9);
                color: white;
                padding: 0.5rem 1rem;
                border-radius: 0.5rem;
                font-size: 0.875rem;
                font-weight: 500;
                z-index: 20;
                opacity: 0;
                transform: translateY(-10px);
                transition: all 0.3s ease;
                pointer-events: none;
                box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.2);
            `;
            dragHint.innerHTML = `
                <i class="bi bi-arrows-move me-2"></i>
                拖拽移動浮水印位置
            `;
            previewArea.appendChild(dragHint);
        }

        // 顯示提示動畫
        setTimeout(() => {
            dragHint.style.opacity = '1';
            dragHint.style.transform = 'translateY(0)';
        }, 100);
    }

    /**
     * 隱藏拖拽提示
     */
    hideDragHint() {
        const dragHint = this.elements.previewArea.querySelector('.drag-hint');
        if (dragHint) {
            dragHint.style.opacity = '0';
            dragHint.style.transform = 'translateY(-10px)';
            setTimeout(() => {
                if (dragHint.parentNode) {
                    dragHint.remove();
                }
            }, 300);
        }
    }

    /**
     * 更新拖拽過程中的視覺回饋
     */
    updateDragFeedback(x, y) {
        // 更新邊界指示器位置
        const indicator = this.elements.previewArea.querySelector('.drag-boundary-indicator');
        if (indicator && this.watermarkBounds) {
            const canvasRect = this.canvas.getBoundingClientRect();
            const previewRect = this.elements.previewArea.getBoundingClientRect();
            
            const relativeX = canvasRect.left - previewRect.left + x;
            const relativeY = canvasRect.top - previewRect.top + y;
            
            indicator.style.left = `${relativeX}px`;
            indicator.style.top = `${relativeY}px`;
        }

        // 檢查是否接近邊界並提供視覺警告
        this.checkBoundaryProximity(x, y);
    }

    /**
     * 檢查邊界接近度並提供視覺警告
     */
    checkBoundaryProximity(x, y) {
        if (!this.canvas || !this.watermarkBounds) return;

        const threshold = 20; // 接近邊界的閾值
        const canvasWidth = this.canvas.width;
        const canvasHeight = this.canvas.height;
        const watermarkWidth = this.watermarkBounds.width;
        const watermarkHeight = this.watermarkBounds.height;

        const nearLeftEdge = x < threshold;
        const nearRightEdge = x + watermarkWidth > canvasWidth - threshold;
        const nearTopEdge = y < threshold;
        const nearBottomEdge = y + watermarkHeight > canvasHeight - threshold;

        // 更新邊界警告樣式
        const indicator = this.elements.previewArea.querySelector('.drag-boundary-indicator');
        if (indicator) {
            if (nearLeftEdge || nearRightEdge || nearTopEdge || nearBottomEdge) {
                indicator.style.borderColor = 'rgba(220, 53, 69, 0.8)';
                indicator.style.backgroundColor = 'rgba(220, 53, 69, 0.1)';
                indicator.style.borderStyle = 'solid';
            } else {
                indicator.style.borderColor = 'rgba(13, 110, 253, 0.5)';
                indicator.style.backgroundColor = 'rgba(13, 110, 253, 0.1)';
                indicator.style.borderStyle = 'dashed';
            }
        }
    }

    /**
     * 顯示拖拽完成回饋
     */
    showDragCompleteFeedback() {
        // 顯示成功提示
        this.showToast('浮水印位置已更新', 'success');
        
        // 添加完成動畫效果
        if (this.canvas) {
            this.canvas.style.transform = 'scale(1.02)';
            setTimeout(() => {
                this.canvas.style.transform = 'scale(1)';
            }, 200);
        }
        
        console.log('拖拽完成回饋已顯示');
    }

    /**
     * 設定響應式處理器
     */
    setupResponsiveHandlers() {
        // 視窗大小變更處理
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                this.handleWindowResize();
            }, 250); // 防抖動，250ms 後執行
        });

        // 螢幕方向變更處理
        window.addEventListener('orientationchange', () => {
            setTimeout(() => {
                this.handleOrientationChange();
            }, 100); // 等待方向變更完成
        });

        // 初始響應式設定
        this.updateResponsiveLayout();
        
        console.log('響應式處理器設定完成');
    }

    /**
     * 處理視窗大小變更
     */
    handleWindowResize() {
        if (this.imageData && this.canvas) {
            // 重新計算 Canvas 尺寸
            this.recalculateCanvasSize();
            this.updatePreview();
        }
        
        // 更新響應式佈局
        this.updateResponsiveLayout();
        
        console.log('視窗大小已變更:', {
            視窗尺寸: `${window.innerWidth}x${window.innerHeight}`,
            預覽區域: `${this.elements.previewArea.clientWidth}x${this.elements.previewArea.clientHeight}`
        });
    }

    /**
     * 處理螢幕方向變更
     */
    handleOrientationChange() {
        // 更新響應式佈局
        this.updateResponsiveLayout();
        
        // 如果有圖片，重新調整 Canvas
        if (this.imageData && this.canvas) {
            this.recalculateCanvasSize();
            this.updatePreview();
        }
        
        console.log('螢幕方向已變更:', {
            方向: screen.orientation ? screen.orientation.angle : 'unknown',
            視窗尺寸: `${window.innerWidth}x${window.innerHeight}`
        });
    }

    /**
     * 重新計算 Canvas 尺寸
     */
    recalculateCanvasSize() {
        if (!this.imageData || !this.imageData.image) return;
        
        // 重新設定 Canvas
        this.setupCanvas(this.imageData.image);
        
        console.log('Canvas 尺寸已重新計算');
    }

    /**
     * 更新響應式佈局
     */
    updateResponsiveLayout() {
        const screenWidth = window.innerWidth;
        const isMobile = screenWidth < 768;
        const isTablet = screenWidth >= 768 && screenWidth < 992;
        const isDesktop = screenWidth >= 992;
        
        // 更新 body 類別
        document.body.classList.toggle('mobile-layout', isMobile);
        document.body.classList.toggle('tablet-layout', isTablet);
        document.body.classList.toggle('desktop-layout', isDesktop);
        
        // 調整預覽區域最小高度
        const previewArea = this.elements.previewArea;
        if (isMobile) {
            previewArea.style.minHeight = '250px';
        } else if (isTablet) {
            previewArea.style.minHeight = '350px';
        } else {
            previewArea.style.minHeight = '400px';
        }
        
        console.log('響應式佈局已更新:', {
            螢幕寬度: screenWidth,
            裝置類型: isMobile ? '手機' : isTablet ? '平板' : '桌面'
        });
    }

    /**
     * 設定圖片縮放功能
     */
    setupImageZoom() {
        if (!this.canvas) return;

        // 創建縮放控制容器
        const zoomControls = document.createElement('div');
        zoomControls.className = 'image-zoom-controls';
        zoomControls.innerHTML = `
            <button class="zoom-btn" id="zoom-out" title="縮小">
                <i class="bi bi-dash"></i>
            </button>
            <button class="zoom-btn" id="zoom-reset" title="重置">
                <i class="bi bi-arrows-fullscreen"></i>
            </button>
            <button class="zoom-btn" id="zoom-in" title="放大">
                <i class="bi bi-plus"></i>
            </button>
        `;

        // 將控制項添加到預覽區域
        this.elements.previewArea.style.position = 'relative';
        this.elements.previewArea.appendChild(zoomControls);

        // 綁定縮放事件
        document.getElementById('zoom-in').addEventListener('click', () => this.zoomImage(1.2));
        document.getElementById('zoom-out').addEventListener('click', () => this.zoomImage(0.8));
        document.getElementById('zoom-reset').addEventListener('click', () => this.resetZoom());

        // 滾輪縮放
        this.canvas.addEventListener('wheel', (e) => {
            e.preventDefault();
            const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
            this.zoomImage(zoomFactor);
        });

        console.log('圖片縮放功能已設定');
    }

    /**
     * 縮放圖片
     */
    zoomImage(factor) {
        const newZoom = this.zoomLevel * factor;
        
        if (newZoom >= this.minZoom && newZoom <= this.maxZoom) {
            this.zoomLevel = newZoom;
            this.applyZoom();
        }
    }

    /**
     * 重置縮放
     */
    resetZoom() {
        this.zoomLevel = 1;
        this.applyZoom();
    }

    /**
     * 應用縮放
     */
    applyZoom() {
        if (!this.canvas) return;

        const scale = this.zoomLevel;
        this.canvas.style.transform = `scale(${scale})`;
        this.canvas.style.transformOrigin = 'center center';

        console.log('縮放已應用:', scale.toFixed(2));
    }

    /**
     * 居中圖片
     */
    centerImage() {
        if (!this.canvas) return;

        // 重置變換
        this.canvas.style.transform = `scale(${this.zoomLevel})`;
        this.canvas.style.transformOrigin = 'center center';
        
        console.log('圖片已居中');
    }

    /**
     * 設定拖放功能
     */
    setupDragAndDrop() {
        const uploadCard = this.elements.uploadSection.querySelector('.card');
        
        // 防止預設拖放行為
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            uploadCard.addEventListener(eventName, this.preventDefaults, false);
            document.body.addEventListener(eventName, this.preventDefaults, false);
        });
        
        // 拖放視覺效果
        ['dragenter', 'dragover'].forEach(eventName => {
            uploadCard.addEventListener(eventName, () => uploadCard.classList.add('drag-over'), false);
        });
        
        ['dragleave', 'drop'].forEach(eventName => {
            uploadCard.addEventListener(eventName, () => uploadCard.classList.remove('drag-over'), false);
        });
        
        // 處理檔案拖放
        uploadCard.addEventListener('drop', (e) => this.handleDrop(e), false);
        
        console.log('拖放功能設定完成');
    }

    /**
     * 防止預設事件行為
     */
    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    /**
     * 處理檔案拖放
     */
    handleDrop(e) {
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            this.processFile(files[0]);
        }
    }

    /**
     * 處理檔案選擇
     */
    handleFileSelect(e) {
        const file = e.target.files[0];
        if (file) {
            this.processFile(file);
        }
    }

    /**
     * 處理檔案處理
     */
    processFile(file) {
        // 檔案驗證
        if (!this.validateFile(file)) {
            return;
        }
        
        // 顯示載入狀態
        this.showLoading(true, '正在讀取檔案...');
        
        const reader = new FileReader();
        
        reader.onload = (e) => {
            this.showLoading(true, '正在載入圖片...');
            this.loadImage(e.target.result);
        };
        
        reader.onerror = (error) => {
            console.error('檔案讀取錯誤:', error);
            this.showError('檔案讀取失敗，請檢查檔案是否損壞');
            this.showLoading(false);
        };
        
        reader.onprogress = (e) => {
            if (e.lengthComputable) {
                const percentComplete = (e.loaded / e.total) * 100;
                this.showLoading(true, `正在讀取檔案... ${Math.round(percentComplete)}%`);
            }
        };
        
        // 開始讀取檔案
        reader.readAsDataURL(file);
        
        console.log('開始處理檔案:', {
            名稱: file.name,
            大小: `${(file.size / 1024 / 1024).toFixed(2)} MB`,
            類型: file.type,
            最後修改: new Date(file.lastModified).toLocaleString()
        });
    }

    /**
     * 驗證檔案
     */
    validateFile(file) {
        const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
        const maxSize = 10 * 1024 * 1024; // 10MB
        
        if (!validTypes.includes(file.type)) {
            this.showError('請選擇有效的圖片檔案 (JPG, PNG, GIF)');
            return false;
        }
        
        if (file.size > maxSize) {
            this.showError('檔案大小不能超過 10MB');
            return false;
        }
        
        return true;
    }

    /**
     * 載入圖片
     */
    loadImage(src) {
        const img = new Image();
        
        img.onload = () => {
            try {
                // 儲存原始圖片資料
                this.imageData = {
                    image: img,
                    originalWidth: img.naturalWidth,
                    originalHeight: img.naturalHeight,
                    aspectRatio: img.naturalWidth / img.naturalHeight
                };
                
                // 設定 Canvas 並計算顯示尺寸
                this.setupCanvas(img);
                
                // 顯示控制面板和預覽
                this.showControlPanel();
                this.updatePreview();
                
                console.log('圖片載入完成:', {
                    原始尺寸: `${this.imageData.originalWidth}x${this.imageData.originalHeight}`,
                    顯示尺寸: `${this.canvas.width}x${this.canvas.height}`,
                    長寬比: this.imageData.aspectRatio.toFixed(2)
                });
            } catch (error) {
                console.error('圖片處理失敗:', error);
                this.showError('圖片處理失敗，請重試');
            } finally {
                this.showLoading(false);
            }
        };
        
        img.onerror = (error) => {
            console.error('圖片載入錯誤:', error);
            this.showError('圖片載入失敗，請檢查檔案格式或重試');
            this.showLoading(false);
        };
        
        // 設定圖片載入超時
        const loadTimeout = setTimeout(() => {
            this.showError('圖片載入超時，請重試');
            this.showLoading(false);
        }, 30000); // 30秒超時
        
        img.onload = (originalOnload => {
            return function() {
                clearTimeout(loadTimeout);
                originalOnload.call(this);
            };
        })(img.onload);
        
        img.onerror = (originalOnerror => {
            return function() {
                clearTimeout(loadTimeout);
                originalOnerror.call(this);
            };
        })(img.onerror);
        
        img.src = src;
    }

    /**
     * 設定 Canvas
     */
    setupCanvas(img) {
        // 取得 Canvas 元素和上下文
        this.canvas = this.elements.previewCanvas;
        this.context = this.canvas.getContext('2d');
        
        // 檢查 Canvas 支援
        if (!this.context) {
            throw new Error('瀏覽器不支援 Canvas，請使用現代瀏覽器');
        }
        
        // 計算響應式顯示尺寸
        const containerPadding = 40;
        const containerWidth = this.elements.previewArea.clientWidth - containerPadding;
        
        // 根據螢幕尺寸調整最大高度
        const screenWidth = window.innerWidth;
        let maxHeight;
        if (screenWidth < 768) {
            // 手機版：較小的最大高度
            maxHeight = Math.min(300, window.innerHeight * 0.4);
        } else if (screenWidth < 992) {
            // 平板版：中等最大高度
            maxHeight = Math.min(450, window.innerHeight * 0.5);
        } else {
            // 桌面版：較大的最大高度
            maxHeight = Math.min(600, window.innerHeight * 0.6);
        }
        
        const originalWidth = img.naturalWidth;
        const originalHeight = img.naturalHeight;
        const aspectRatio = originalWidth / originalHeight;
        
        // 計算最佳顯示尺寸
        let displayWidth, displayHeight;
        
        if (containerWidth / aspectRatio <= maxHeight) {
            // 寬度為限制因素
            displayWidth = containerWidth;
            displayHeight = containerWidth / aspectRatio;
        } else {
            // 高度為限制因素
            displayHeight = maxHeight;
            displayWidth = maxHeight * aspectRatio;
        }
        
        // 設定 Canvas 尺寸
        this.canvas.width = displayWidth;
        this.canvas.height = displayHeight;
        
        // 設定 Canvas 樣式
        this.canvas.style.width = `${displayWidth}px`;
        this.canvas.style.height = `${displayHeight}px`;
        
        // 儲存顯示尺寸資訊
        this.imageData.displayWidth = displayWidth;
        this.imageData.displayHeight = displayHeight;
        this.imageData.scaleFactor = displayWidth / originalWidth;
        
        // 設定浮水印拖拽功能
        this.setupWatermarkDrag();
        
        // 設定圖片縮放功能
        this.setupImageZoom();
        
        console.log('Canvas 設定完成:', {
            原始尺寸: `${originalWidth}x${originalHeight}`,
            顯示尺寸: `${displayWidth}x${displayHeight}`,
            縮放比例: `${this.imageData.scaleFactor.toFixed(3)}`
        });
    }









    /**
     * 渲染預設類型浮水印
     */
    renderPresetWatermark(watermarkContent) {
        const { text, config } = watermarkContent;
        const presetType = this.watermarkConfig.presetType;
        
        // 設定基本樣式
        this.setupWatermarkTextStyle(config);
        
        // 根據預設類型應用特殊渲染邏輯
        switch (presetType) {
            case 'sample':
                this.renderSampleWatermark(text, config);
                break;
            case 'taiwan-id':
                this.renderTaiwanIdWatermark(text, config);
                break;
            case 'document-copy':
                this.renderDocumentCopyWatermark(text, config);
                break;
            case 'confidential':
                this.renderConfidentialWatermark(text, config);
                break;
            default:
                this.renderStandardWatermark(text, config);
        }
    }

    /**
     * 渲染自訂文字浮水印
     */
    renderCustomTextWatermark(watermarkContent) {
        const { text, config } = watermarkContent;
        
        // 使用使用者設定的樣式
        const customConfig = {
            fontSize: this.watermarkConfig.fontSize,
            color: this.watermarkConfig.color,
            opacity: this.watermarkConfig.opacity,
            fontWeight: 'normal'
        };
        
        this.setupWatermarkTextStyle(customConfig);
        this.renderStandardWatermark(text, customConfig);
    }

    /**
     * 設定浮水印文字樣式
     */
    setupWatermarkTextStyle(config) {
        const scaledFontSize = (config.fontSize || this.watermarkConfig.fontSize) * this.imageData.scaleFactor;
        const fontWeight = config.fontWeight || 'normal';
        const opacity = config.opacity !== undefined ? config.opacity : this.watermarkConfig.opacity;
        const color = config.color || this.watermarkConfig.color;
        
        // 設定字體
        this.context.font = `${fontWeight} ${scaledFontSize}px Arial, "Microsoft JhengHei", "PingFang TC", sans-serif`;
        this.context.textAlign = 'left';
        this.context.textBaseline = 'top';
        
        // 設定顏色和透明度
        this.context.fillStyle = this.hexToRgba(color, opacity);
        
        // 設定文字陰影以提高可讀性
        this.context.shadowColor = 'rgba(255, 255, 255, 0.8)';
        this.context.shadowBlur = 2;
        this.context.shadowOffsetX = 1;
        this.context.shadowOffsetY = 1;
    }

    /**
     * 渲染標準浮水印
     */
    renderStandardWatermark(text, config) {
        const position = this.calculateWatermarkPosition(text, config);
        
        // 如果有背景，先繪製背景
        if (config.hasBackground) {
            this.drawWatermarkBackground(position, config);
        }
        
        // 繪製文字
        this.context.fillText(text, position.x, position.y);
        
        // 更新浮水印邊界資訊
        this.updateWatermarkBounds(position.x, position.y, position.width, position.height);
    }

    /**
     * 渲染 SAMPLE 浮水印（對角線重複）
     */
    renderSampleWatermark(text, config) {
        this.context.save();
        
        const scaledFontSize = config.fontSize * this.imageData.scaleFactor;
        this.context.font = `${config.fontWeight} ${scaledFontSize}px Arial`;
        this.context.fillStyle = this.hexToRgba(config.color, config.opacity);
        this.context.textAlign = 'center';
        this.context.textBaseline = 'middle';
        
        // 移除陰影效果
        this.context.shadowColor = 'transparent';
        
        if (config.isRepeated) {
            // 重複對角線浮水印
            const spacing = scaledFontSize * 3;
            for (let x = -this.canvas.width; x < this.canvas.width * 2; x += spacing) {
                for (let y = -this.canvas.height; y < this.canvas.height * 2; y += spacing) {
                    this.context.save();
                    this.context.translate(x, y);
                    this.context.rotate(-Math.PI / 6); // -30度
                    this.context.fillText(text, 0, 0);
                    this.context.restore();
                }
            }
        } else {
            // 單一中央對角線浮水印
            this.context.translate(this.canvas.width / 2, this.canvas.height / 2);
            this.context.rotate(-Math.PI / 6);
            this.context.fillText(text, 0, 0);
        }
        
        this.context.restore();
        
        // 更新邊界（整個 Canvas 區域）
        this.updateWatermarkBounds(0, 0, this.canvas.width, this.canvas.height);
    }

    /**
     * 渲染台灣身分證浮水印
     */
    renderTaiwanIdWatermark(text, config) {
        const position = this.calculateWatermarkPosition(text, config);
        
        // 繪製背景框
        if (config.hasBackground) {
            this.drawWatermarkBackground(position, config);
        }
        
        // 繪製主要文字
        this.context.fillText(text, position.x, position.y);
        
        // 繪製邊框
        this.context.strokeStyle = this.hexToRgba(config.color, config.opacity * 0.8);
        this.context.lineWidth = 2;
        this.context.strokeRect(
            position.x - config.padding,
            position.y - config.padding,
            position.width + config.padding * 2,
            position.height + config.padding * 2
        );
        
        this.updateWatermarkBounds(position.x, position.y, position.width, position.height);
    }

    /**
     * 渲染文件備份浮水印
     */
    renderDocumentCopyWatermark(text, config) {
        const position = this.calculateWatermarkPosition(text, config);
        
        // 繪製主要文字
        this.context.fillText(text, position.x, position.y);
        
        // 如果需要時間戳
        if (config.hasTimestamp) {
            const timestamp = new Date().toLocaleDateString('zh-TW', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
            });
            
            const timestampFontSize = config.fontSize * 0.7 * this.imageData.scaleFactor;
            this.context.font = `normal ${timestampFontSize}px Arial`;
            this.context.fillStyle = this.hexToRgba(config.color, config.opacity * 0.7);
            
            const timestampY = position.y + position.height + 5;
            this.context.fillText(timestamp, position.x, timestampY);
        }
        
        this.updateWatermarkBounds(position.x, position.y, position.width, position.height);
    }

    /**
     * 渲染機密文件浮水印
     */
    renderConfidentialWatermark(text, config) {
        const position = this.calculateWatermarkPosition(text, config);
        
        // 繪製背景
        if (config.hasBackground) {
            this.drawWatermarkBackground(position, config);
        }
        
        // 繪製文字
        this.context.fillText(text, position.x, position.y);
        
        // 添加警告圖示
        const iconSize = config.fontSize * 0.8 * this.imageData.scaleFactor;
        const iconX = position.x - iconSize - 5;
        const iconY = position.y + (position.height - iconSize) / 2;
        
        this.drawWarningIcon(iconX, iconY, iconSize, config);
        
        this.updateWatermarkBounds(position.x, position.y, position.width, position.height);
    }

    /**
     * 繪製浮水印背景
     */
    drawWatermarkBackground(position, config) {
        this.context.save();
        
        const padding = config.padding || 5;
        this.context.fillStyle = config.backgroundColor || 'rgba(255, 255, 255, 0.8)';
        this.context.fillRect(
            position.x - padding,
            position.y - padding,
            position.width + padding * 2,
            position.height + padding * 2
        );
        
        this.context.restore();
    }

    /**
     * 繪製警告圖示
     */
    drawWarningIcon(x, y, size, config) {
        this.context.save();
        
        this.context.fillStyle = this.hexToRgba(config.color, config.opacity);
        this.context.strokeStyle = this.hexToRgba(config.color, config.opacity);
        this.context.lineWidth = 2;
        
        // 繪製三角形警告圖示
        this.context.beginPath();
        this.context.moveTo(x + size / 2, y);
        this.context.lineTo(x, y + size);
        this.context.lineTo(x + size, y + size);
        this.context.closePath();
        this.context.stroke();
        
        // 繪製驚嘆號
        this.context.fillRect(x + size / 2 - 1, y + size * 0.3, 2, size * 0.4);
        this.context.fillRect(x + size / 2 - 1, y + size * 0.8, 2, 2);
        
        this.context.restore();
    }

    /**
     * 取得浮水印文字 - 相容性函數
     */
    getWatermarkText() {
        const content = this.getWatermarkContent();
        return content ? content.text : '';
    }

    /**
     * 計算浮水印位置 - 支援透明度和位置計算
     */
    calculateWatermarkPosition(text, config = {}) {
        // 測量文字尺寸
        const metrics = this.context.measureText(text);
        const textWidth = metrics.width;
        
        // 計算文字高度（考慮字體大小和縮放）
        const fontSize = config.fontSize || this.watermarkConfig.fontSize;
        const scaledFontSize = fontSize * this.imageData.scaleFactor;
        const textHeight = scaledFontSize;
        
        // 計算實際文字邊界框（包含上下間距）
        const actualTextHeight = scaledFontSize * 1.2; // 增加 20% 的行高
        
        let x, y;
        
        // 如果有自訂位置（拖拽設定），使用自訂位置
        if (this.watermarkConfig.x !== 0 || this.watermarkConfig.y !== 0) {
            x = this.watermarkConfig.x;
            y = this.watermarkConfig.y;
        } else {
            // 根據預設位置計算座標
            const padding = this.calculateDynamicPadding();
            
            switch (this.watermarkConfig.position) {
                case 'top-left':
                    x = padding;
                    y = padding;
                    break;
                case 'top-center':
                    x = (this.canvas.width - textWidth) / 2;
                    y = padding;
                    break;
                case 'top-right':
                    x = this.canvas.width - textWidth - padding;
                    y = padding;
                    break;
                case 'center-left':
                    x = padding;
                    y = (this.canvas.height - actualTextHeight) / 2;
                    break;
                case 'center':
                    x = (this.canvas.width - textWidth) / 2;
                    y = (this.canvas.height - actualTextHeight) / 2;
                    break;
                case 'center-right':
                    x = this.canvas.width - textWidth - padding;
                    y = (this.canvas.height - actualTextHeight) / 2;
                    break;
                case 'bottom-left':
                    x = padding;
                    y = this.canvas.height - actualTextHeight - padding;
                    break;
                case 'bottom-center':
                    x = (this.canvas.width - textWidth) / 2;
                    y = this.canvas.height - actualTextHeight - padding;
                    break;
                case 'bottom-right':
                default:
                    x = this.canvas.width - textWidth - padding;
                    y = this.canvas.height - actualTextHeight - padding;
                    break;
            }
        }
        
        // 確保浮水印不會超出 Canvas 邊界
        const constrainedPosition = this.constrainPositionToBounds(x, y, textWidth, actualTextHeight);
        
        return {
            x: constrainedPosition.x,
            y: constrainedPosition.y,
            width: textWidth,
            height: actualTextHeight,
            fontSize: scaledFontSize
        };
    }

    /**
     * 計算動態內邊距
     */
    calculateDynamicPadding() {
        // 根據 Canvas 尺寸和縮放比例計算適當的內邊距
        const basePadding = 20;
        const scaleFactor = this.imageData.scaleFactor;
        const canvasSize = Math.min(this.canvas.width, this.canvas.height);
        
        // 根據 Canvas 大小調整內邊距
        let dynamicPadding = basePadding * scaleFactor;
        
        // 確保內邊距在合理範圍內
        const minPadding = Math.max(10, canvasSize * 0.02);
        const maxPadding = Math.min(50, canvasSize * 0.1);
        
        dynamicPadding = Math.max(minPadding, Math.min(maxPadding, dynamicPadding));
        
        return Math.round(dynamicPadding);
    }

    /**
     * 約束位置在邊界內
     */
    constrainPositionToBounds(x, y, width, height) {
        const minX = 0;
        const maxX = this.canvas.width - width;
        const minY = 0;
        const maxY = this.canvas.height - height;
        
        const constrainedX = Math.max(minX, Math.min(maxX, x));
        const constrainedY = Math.max(minY, Math.min(maxY, y));
        
        return { x: constrainedX, y: constrainedY };
    }



    /**
     * 將十六進位顏色轉換為 RGBA
     */
    hexToRgba(hex, alpha) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }

    /**
     * 更新預覽 - 即時預覽更新系統
     */
    updatePreview() {
        if (!this.imageData || !this.canvas) {
            return;
        }

        // 使用防抖動機制避免過度渲染
        this.debouncePreviewUpdate();
    }

    /**
     * 防抖動預覽更新
     */
    debouncePreviewUpdate() {
        // 清除之前的定時器
        if (this.previewUpdateTimer) {
            clearTimeout(this.previewUpdateTimer);
        }

        // 顯示更新中狀態
        this.showPreviewUpdating(true);

        // 設定新的定時器
        this.previewUpdateTimer = setTimeout(() => {
            this.performPreviewUpdate();
            this.showPreviewUpdating(false);
        }, 100); // 100ms 防抖動延遲
    }

    /**
     * 執行預覽更新
     */
    performPreviewUpdate() {
        try {
            // 繪製浮水印
            this.drawWatermark();
            
            // 更新預覽狀態指示
            this.updatePreviewStatus();
            
            // 啟用下載按鈕
            this.elements.downloadBtn.disabled = false;
            
            console.log('預覽更新完成');
        } catch (error) {
            console.error('預覽更新失敗:', error);
            this.showError('預覽更新失敗，請重試');
        }
    }

    /**
     * 顯示預覽更新中狀態
     */
    showPreviewUpdating(isUpdating) {
        const previewArea = this.elements.previewArea;
        const cardHeader = previewArea.closest('.card').querySelector('.card-header');
        
        if (isUpdating) {
            // 添加更新中樣式
            previewArea.classList.add('preview-updating');
            
            // 更新標題狀態
            if (cardHeader) {
                const statusElement = cardHeader.querySelector('.preview-status') || 
                    this.createPreviewStatusElement(cardHeader);
                statusElement.innerHTML = `
                    <div class="spinner-border spinner-border-sm text-primary me-2" role="status">
                        <span class="visually-hidden">更新中...</span>
                    </div>
                    <span class="text-muted">更新中...</span>
                `;
            }
        } else {
            // 移除更新中樣式
            previewArea.classList.remove('preview-updating');
            
            // 恢復標題狀態
            if (cardHeader) {
                const statusElement = cardHeader.querySelector('.preview-status');
                if (statusElement) {
                    statusElement.innerHTML = `
                        <i class="bi bi-check-circle text-success me-1"></i>
                        <span class="text-success">預覽已更新</span>
                    `;
                    
                    // 3秒後隱藏狀態
                    setTimeout(() => {
                        if (statusElement) {
                            statusElement.innerHTML = '';
                        }
                    }, 3000);
                }
            }
        }
    }

    /**
     * 創建預覽狀態元素
     */
    createPreviewStatusElement(cardHeader) {
        const statusElement = document.createElement('small');
        statusElement.className = 'preview-status ms-auto';
        cardHeader.appendChild(statusElement);
        return statusElement;
    }

    /**
     * 更新預覽狀態指示
     */
    updatePreviewStatus() {
        const watermarkText = this.getWatermarkText();
        const hasWatermark = watermarkText && watermarkText.length > 0;
        
        // 更新預覽區域狀態
        if (hasWatermark) {
            this.elements.previewArea.classList.remove('empty-preview');
            this.elements.previewArea.classList.add('has-watermark');
        } else {
            this.elements.previewArea.classList.add('empty-preview');
            this.elements.previewArea.classList.remove('has-watermark');
            this.showEmptyWatermarkHint();
        }
        
        console.log('預覽狀態已更新:', { hasWatermark, text: watermarkText });
    }

    /**
     * 顯示空浮水印提示
     */
    showEmptyWatermarkHint() {
        // 移除現有提示
        const existingHint = this.elements.previewArea.querySelector('.empty-preview-hint');
        if (existingHint) {
            existingHint.remove();
        }

        // 創建新提示
        const hint = document.createElement('div');
        hint.className = 'empty-preview-hint position-absolute';
        hint.style.cssText = `
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 10;
            pointer-events: none;
        `;
        hint.innerHTML = `
            <div class="text-center">
                <i class="bi bi-type fs-1 mb-3"></i>
                <h6>請輸入浮水印文字</h6>
                <p class="mb-0">選擇預設類型或輸入自訂文字</p>
            </div>
        `;
        
        this.elements.previewArea.appendChild(hint);
        
        // 5秒後自動隱藏
        setTimeout(() => {
            if (hint.parentNode) {
                hint.style.opacity = '0';
                setTimeout(() => {
                    if (hint.parentNode) {
                        hint.remove();
                    }
                }, 300);
            }
        }, 5000);
    }

    /**
     * 高效的 Canvas 重繪邏輯
     */
    optimizedRedraw() {
        if (!this.canvas || !this.context || !this.imageData) {
            return;
        }

        // 使用 requestAnimationFrame 優化重繪
        if (this.redrawAnimationFrame) {
            cancelAnimationFrame(this.redrawAnimationFrame);
        }

        this.redrawAnimationFrame = requestAnimationFrame(() => {
            this.performPreviewUpdate();
        });
    }

    /**
     * 批量更新預覽（用於多個設定同時變更）
     */
    batchUpdatePreview(updates) {
        // 暫停即時更新
        this.pauseRealTimeUpdate = true;
        
        // 應用所有更新
        Object.keys(updates).forEach(key => {
            if (this.watermarkConfig.hasOwnProperty(key)) {
                this.watermarkConfig[key] = updates[key];
            }
        });
        
        // 恢復即時更新並執行一次更新
        this.pauseRealTimeUpdate = false;
        this.updatePreview();
        
        console.log('批量更新完成:', updates);
    }

    /**
     * 預覽更新觸發機制
     */
    triggerPreviewUpdate(source = 'unknown') {
        // 如果暫停即時更新，則跳過
        if (this.pauseRealTimeUpdate) {
            return;
        }

        // 記錄觸發來源
        console.log('預覽更新觸發:', source);
        
        // 執行更新
        this.updatePreview();
    }

    /**
     * 顯示控制面板
     */
    showControlPanel() {
        this.elements.controlPanel.classList.remove('d-none');
        this.elements.controlPanel.classList.add('fade-in');
        
        // 隱藏預覽區域的提示文字，顯示 canvas
        this.elements.previewArea.querySelector('.text-center').classList.add('d-none');
        this.elements.previewCanvas.classList.remove('d-none');
        
        // 設定圖片縮放功能
        this.setupImageZoom();
        
        // 設定浮水印拖拽功能
        this.setupWatermarkDrag();
        
        // 居中圖片
        this.centerImage();
        
        console.log('控制面板已顯示');
    }

    /**
     * 處理浮水印類型變更
     */
    handleWatermarkTypeChange(e) {
        const type = e.target.value;
        this.watermarkConfig.type = type;
        
        // 更新視覺狀態指示
        this.updateWatermarkTypeVisualState(type);
        
        if (type === 'preset') {
            this.elements.presetOptions.classList.remove('d-none');
            this.elements.customOptions.classList.add('d-none');
            
            // 應用預設浮水印設定
            this.applyPresetWatermark(this.elements.presetSelect.value);
        } else {
            this.elements.presetOptions.classList.add('d-none');
            this.elements.customOptions.classList.remove('d-none');
            
            // 使用自訂文字
            this.watermarkConfig.text = this.elements.customText.value;
            
            // 如果自訂文字為空，顯示提示
            if (!this.watermarkConfig.text.trim()) {
                this.showCustomTextHint();
            }
        }
        
        this.updatePreview();
        this.saveUserPreferences();
        console.log('浮水印類型已變更:', type);
    }

    /**
     * 更新浮水印類型的視覺狀態指示
     */
    updateWatermarkTypeVisualState(type) {
        const presetBtn = document.querySelector('label[for="preset-type"]');
        const customBtn = document.querySelector('label[for="custom-type"]');
        
        // 重置所有按鈕狀態
        presetBtn.classList.remove('active', 'btn-primary');
        customBtn.classList.remove('active', 'btn-primary');
        presetBtn.classList.add('btn-outline-primary');
        customBtn.classList.add('btn-outline-primary');
        
        // 設定選中狀態的視覺回饋
        if (type === 'preset') {
            presetBtn.classList.remove('btn-outline-primary');
            presetBtn.classList.add('btn-primary', 'active');
        } else {
            customBtn.classList.remove('btn-outline-primary');
            customBtn.classList.add('btn-primary', 'active');
        }
        
        // 添加動畫效果
        const activeBtn = type === 'preset' ? presetBtn : customBtn;
        activeBtn.style.transform = 'scale(1.02)';
        setTimeout(() => {
            activeBtn.style.transform = 'scale(1)';
        }, 150);
    }

    /**
     * 顯示自訂文字提示
     */
    showCustomTextHint() {
        const customTextInput = this.elements.customText;
        const inputGroup = customTextInput.closest('.input-group');
        
        // 添加提示樣式
        customTextInput.classList.add('is-invalid');
        
        // 創建或更新提示訊息
        let feedback = inputGroup.querySelector('.invalid-feedback');
        if (!feedback) {
            feedback = document.createElement('div');
            feedback.className = 'invalid-feedback';
            inputGroup.appendChild(feedback);
        }
        feedback.textContent = '請輸入浮水印文字';
        
        // 聚焦到輸入框
        customTextInput.focus();
        
        // 3秒後移除提示
        setTimeout(() => {
            customTextInput.classList.remove('is-invalid');
            if (feedback) {
                feedback.remove();
            }
        }, 3000);
    }

    /**
     * 處理預設類型變更
     */
    handlePresetChange(e) {
        const presetType = e.target.value;
        this.watermarkConfig.presetType = presetType;
        
        // 應用預設浮水印設定
        this.applyPresetWatermark(presetType);
        
        this.updatePreview();
        this.saveUserPreferences();
        console.log('預設類型已變更:', presetType);
    }

    /**
     * 應用預設浮水印設定
     */
    applyPresetWatermark(presetType) {
        const preset = PRESET_WATERMARKS[presetType];
        if (!preset) {
            console.warn('未找到預設浮水印類型:', presetType);
            return;
        }

        // 應用預設設定到浮水印配置
        this.watermarkConfig.text = preset.text;
        this.watermarkConfig.fontSize = preset.fontSize;
        this.watermarkConfig.color = preset.color;
        this.watermarkConfig.opacity = preset.opacity;
        this.watermarkConfig.position = preset.position;

        // 更新 UI 控制項以反映預設設定
        this.updateUIFromPreset(preset);

        // 顯示預設浮水印預覽提示
        this.showPresetPreview(preset);

        console.log('已應用預設浮水印:', presetType, preset);
    }

    /**
     * 更新 UI 控制項以反映預設設定
     */
    updateUIFromPreset(preset) {
        // 更新透明度滑桿
        if (this.elements.opacityRange) {
            this.elements.opacityRange.value = preset.opacity * 100;
            this.elements.opacityValue.textContent = Math.round(preset.opacity * 100) + '%';
        }

        // 更新字體大小滑桿
        if (this.elements.fontsizeRange) {
            this.elements.fontsizeRange.value = preset.fontSize;
            this.elements.fontsizeValue.textContent = preset.fontSize + 'px';
        }

        // 更新位置選擇
        const positionRadio = document.querySelector(`input[name="position"][value="${preset.position}"]`);
        if (positionRadio) {
            // 清除所有位置選擇
            this.elements.positionRadios.forEach(radio => {
                radio.checked = false;
                const label = document.querySelector(`label[for="${radio.id}"]`);
                if (label) {
                    label.classList.remove('active');
                }
            });
            
            // 設定新的位置選擇
            positionRadio.checked = true;
            const label = document.querySelector(`label[for="${positionRadio.id}"]`);
            if (label) {
                label.classList.add('active');
            }
        }
    }

    /**
     * 顯示預設浮水印預覽提示
     */
    showPresetPreview(preset) {
        // 創建預覽提示
        const previewHint = document.createElement('div');
        previewHint.className = 'alert alert-info alert-dismissible fade show mt-2';
        previewHint.innerHTML = `
            <i class="bi bi-info-circle-fill me-2"></i>
            <strong>預設浮水印已套用:</strong> ${preset.description}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        // 插入到預設選項卡片中
        const presetCard = this.elements.presetOptions;
        const existingHint = presetCard.querySelector('.alert');
        if (existingHint) {
            existingHint.remove();
        }
        presetCard.appendChild(previewHint);

        // 3秒後自動移除
        setTimeout(() => {
            if (previewHint.parentNode) {
                previewHint.remove();
            }
        }, 3000);
    }

    /**
     * 初始化預設浮水印選項
     */
    initializePresetOptions() {
        const presetSelect = this.elements.presetSelect;
        if (!presetSelect) return;

        // 清空現有選項
        presetSelect.innerHTML = '';

        // 添加預設浮水印選項
        Object.keys(PRESET_WATERMARKS).forEach(key => {
            const preset = PRESET_WATERMARKS[key];
            const option = document.createElement('option');
            option.value = key;
            option.textContent = preset.text;
            option.title = preset.description;
            presetSelect.appendChild(option);
        });

        // 設定預設選擇
        presetSelect.value = 'taiwan-id';
        
        console.log('預設浮水印選項已初始化');
    }

    /**
     * 處理自訂文字變更
     */
    handleCustomTextChange(e) {
        const inputValue = e.target.value;
        const inputElement = e.target;
        
        // 更新浮水印配置
        this.watermarkConfig.text = inputValue;
        
        // 執行即時驗證
        this.validateCustomTextInput(inputElement, inputValue);
        
        // 更新字元計數器
        this.updateTextLengthIndicator(inputValue);
        
        // 處理空文字情況
        this.handleEmptyTextCase(inputValue.trim());
        
        // 即時預覽更新
        this.updatePreview();
        
        // 提供即時回饋
        this.provideRealTimeFeedback(inputValue);
        
        // 儲存使用者偏好
        this.saveUserPreferences();
        
        console.log('自訂文字已變更:', inputValue);
    }

    /**
     * 處理空文字情況
     */
    handleEmptyTextCase(trimmedText) {
        const customOptions = document.getElementById('custom-options');
        const downloadBtn = this.elements.downloadBtn;
        
        if (trimmedText.length === 0 && this.watermarkConfig.type === 'custom') {
            // 文字為空時的處理
            customOptions?.classList.add('empty-text-state');
            
            // 禁用下載按鈕（如果沒有其他浮水印）
            if (downloadBtn && !this.hasValidWatermark()) {
                downloadBtn.disabled = true;
                downloadBtn.innerHTML = `
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    請輸入文字
                `;
            }
        } else {
            // 有文字時的處理
            customOptions?.classList.remove('empty-text-state');
            
            // 啟用下載按鈕
            if (downloadBtn) {
                downloadBtn.disabled = false;
                downloadBtn.innerHTML = `
                    <i class="bi bi-download me-2"></i>
                    下載圖片
                `;
            }
        }
    }

    /**
     * 檢查是否有有效的浮水印
     */
    hasValidWatermark() {
        if (this.watermarkConfig.type === 'preset') {
            return true; // 預設類型總是有效
        } else if (this.watermarkConfig.type === 'custom') {
            return this.watermarkConfig.text && this.watermarkConfig.text.trim().length > 0;
        }
        return false;
    }

    /**
     * 提供即時回饋
     */
    provideRealTimeFeedback(inputValue) {
        const trimmedValue = inputValue.trim();
        
        // 根據文字長度提供不同的回饋
        if (trimmedValue.length === 0) {
            // 空文字 - 已在 handleEmptyTextCase 中處理
            return;
        } else if (trimmedValue.length <= 5) {
            // 短文字
            this.showInputFeedback('文字較短，建議增加內容', 'info');
        } else if (trimmedValue.length <= 15) {
            // 適中文字
            this.showInputFeedback('文字長度適中', 'success');
        } else if (trimmedValue.length <= 30) {
            // 較長文字
            this.showInputFeedback('文字較長，請確認顯示效果', 'warning');
        } else {
            // 很長文字
            this.showInputFeedback('文字過長，建議縮短', 'warning');
        }
    }

    /**
     * 顯示輸入回饋
     */
    showInputFeedback(message, type) {
        const helpElement = document.getElementById('custom-text-help');
        if (!helpElement) return;
        
        // 清除之前的回饋
        clearTimeout(this.feedbackTimeout);
        
        // 設定新的回饋
        const iconMap = {
            'info': 'info-circle',
            'success': 'check-circle',
            'warning': 'exclamation-triangle'
        };
        
        const colorMap = {
            'info': 'text-primary',
            'success': 'text-success',
            'warning': 'text-warning'
        };
        
        helpElement.className = `form-text mt-2 ${colorMap[type]}`;
        helpElement.innerHTML = `
            <small>
                <i class="bi bi-${iconMap[type]} me-1"></i>
                ${message}
            </small>
        `;
        
        // 3秒後恢復預設狀態
        this.feedbackTimeout = setTimeout(() => {
            helpElement.className = 'form-text mt-2';
            helpElement.innerHTML = `
                <small class="text-muted">
                    <i class="bi bi-info-circle me-1"></i>
                    建議使用簡短文字以獲得最佳效果 (最多50字元)
                </small>
            `;
        }, 3000);
    }

    /**
     * 驗證自訂文字輸入
     */
    validateCustomTextInput(inputElement, value) {
        const feedbackElement = document.getElementById('custom-text-feedback');
        const successElement = document.getElementById('custom-text-success');
        const helpElement = document.getElementById('custom-text-help');
        
        // 清除之前的驗證狀態
        inputElement.classList.remove('is-valid', 'is-invalid');
        feedbackElement.textContent = '';
        successElement.textContent = '';
        
        // 驗證規則
        const validationResult = this.validateTextContent(value);
        
        if (!validationResult.isValid) {
            // 顯示錯誤狀態
            inputElement.classList.add('is-invalid');
            feedbackElement.textContent = validationResult.message;
            helpElement.classList.add('text-danger');
            helpElement.classList.remove('text-muted');
            
            // 添加錯誤動畫效果
            inputElement.style.animation = 'shake 0.3s ease-in-out';
            setTimeout(() => {
                inputElement.style.animation = '';
            }, 300);
        } else if (value.trim().length > 0) {
            // 顯示成功狀態
            inputElement.classList.add('is-valid');
            successElement.textContent = validationResult.message;
            helpElement.classList.remove('text-danger');
            helpElement.classList.add('text-muted');
        } else {
            // 重置為預設狀態
            helpElement.classList.remove('text-danger');
            helpElement.classList.add('text-muted');
        }
    }

    /**
     * 驗證文字內容
     */
    validateTextContent(text) {
        const trimmedText = text.trim();
        
        // 空文字檢查
        if (trimmedText.length === 0) {
            return {
                isValid: false,
                message: '請輸入浮水印文字'
            };
        }
        
        // 長度檢查
        if (text.length > 50) {
            return {
                isValid: false,
                message: '文字長度不能超過50個字元'
            };
        }
        
        // 特殊字元檢查（可選）
        const invalidChars = /[<>]/g;
        if (invalidChars.test(text)) {
            return {
                isValid: false,
                message: '不能包含特殊字元 < 或 >'
            };
        }
        
        // 長度建議
        if (text.length > 30) {
            return {
                isValid: true,
                message: '文字較長，建議縮短以獲得更好的顯示效果'
            };
        }
        
        // 驗證通過
        return {
            isValid: true,
            message: '文字格式正確'
        };
    }

    /**
     * 更新文字長度指示器
     */
    updateTextLengthIndicator(text) {
        const lengthCountElement = document.getElementById('text-length-count');
        const lengthIndicatorElement = document.getElementById('text-length-indicator');
        
        if (!lengthCountElement || !lengthIndicatorElement) return;
        
        const currentLength = text.length;
        const maxLength = 50;
        
        // 更新計數
        lengthCountElement.textContent = currentLength;
        
        // 根據長度變更顏色
        lengthIndicatorElement.classList.remove('text-muted', 'text-warning', 'text-danger');
        
        if (currentLength === 0) {
            lengthIndicatorElement.classList.add('text-muted');
        } else if (currentLength > 40) {
            lengthIndicatorElement.classList.add('text-danger');
        } else if (currentLength > 30) {
            lengthIndicatorElement.classList.add('text-warning');
        } else {
            lengthIndicatorElement.classList.add('text-muted');
        }
        
        // 添加進度條效果
        const percentage = (currentLength / maxLength) * 100;
        lengthIndicatorElement.style.background = `linear-gradient(to right, 
            ${currentLength > 40 ? '#dc3545' : currentLength > 30 ? '#ffc107' : '#6c757d'} ${percentage}%, 
            transparent ${percentage}%)`;
        lengthIndicatorElement.style.backgroundSize = '100% 2px';
        lengthIndicatorElement.style.backgroundRepeat = 'no-repeat';
        lengthIndicatorElement.style.backgroundPosition = 'bottom';
    }

    /**
     * 處理自訂文字失去焦點
     */
    handleCustomTextBlur(e) {
        const inputValue = e.target.value.trim();
        const inputElement = e.target;
        
        // 如果文字為空，顯示提示
        if (inputValue.length === 0 && this.watermarkConfig.type === 'custom') {
            this.showCustomTextEmptyHint();
        }
        
        // 自動修正文字（去除首尾空格）
        if (inputValue !== e.target.value) {
            e.target.value = inputValue;
            this.watermarkConfig.text = inputValue;
            this.updatePreview();
        }
        
        console.log('自訂文字失去焦點:', inputValue);
    }

    /**
     * 處理自訂文字獲得焦點
     */
    handleCustomTextFocus(e) {
        const helpElement = document.getElementById('custom-text-help');
        
        // 顯示輸入提示
        if (helpElement) {
            helpElement.innerHTML = `
                <small class="text-primary">
                    <i class="bi bi-lightbulb me-1"></i>
                    正在輸入浮水印文字...
                </small>
            `;
        }
        
        // 清除空文字提示
        this.clearCustomTextEmptyHint();
        
        console.log('自訂文字獲得焦點');
    }

    /**
     * 處理自訂文字鍵盤事件
     */
    handleCustomTextKeydown(e) {
        // Enter 鍵快速應用
        if (e.key === 'Enter') {
            e.preventDefault();
            e.target.blur();
            
            // 如果有文字，觸發預覽更新
            if (e.target.value.trim()) {
                this.updatePreview();
                this.showSuccessMessage('浮水印文字已應用');
            }
        }
        
        // Escape 鍵清空
        if (e.key === 'Escape') {
            e.target.value = '';
            this.watermarkConfig.text = '';
            this.updateTextLengthIndicator('');
            this.updatePreview();
            e.target.blur();
        }
        
        // 防止超過最大長度
        if (e.target.value.length >= 50 && 
            !['Backspace', 'Delete', 'ArrowLeft', 'ArrowRight', 'Tab'].includes(e.key)) {
            e.preventDefault();
            this.showWarningMessage('已達到最大字元限制');
        }
    }

    /**
     * 顯示自訂文字空白提示
     */
    showCustomTextEmptyHint() {
        const customOptions = document.getElementById('custom-options');
        if (!customOptions) return;
        
        // 創建提示元素
        let emptyHint = customOptions.querySelector('.empty-text-hint');
        if (!emptyHint) {
            emptyHint = document.createElement('div');
            emptyHint.className = 'alert alert-warning alert-dismissible fade show mt-2 empty-text-hint';
            emptyHint.innerHTML = `
                <i class="bi bi-exclamation-triangle-fill me-2"></i>
                <strong>提示:</strong> 請輸入浮水印文字以查看效果
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            customOptions.appendChild(emptyHint);
        }
        
        // 5秒後自動移除
        setTimeout(() => {
            if (emptyHint.parentNode) {
                emptyHint.remove();
            }
        }, 5000);
    }

    /**
     * 清除自訂文字空白提示
     */
    clearCustomTextEmptyHint() {
        const emptyHint = document.querySelector('.empty-text-hint');
        if (emptyHint) {
            emptyHint.remove();
        }
    }

    /**
     * 顯示成功訊息
     */
    showSuccessMessage(message) {
        this.showToast(message, 'success');
    }

    /**
     * 顯示警告訊息
     */
    showWarningMessage(message) {
        this.showToast(message, 'warning');
    }

    /**
     * 顯示 Toast 訊息
     */
    showToast(message, type = 'info') {
        // 創建 toast 容器（如果不存在）
        let toastContainer = document.getElementById('toast-container');
        if (!toastContainer) {
            toastContainer = document.createElement('div');
            toastContainer.id = 'toast-container';
            toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
            toastContainer.style.zIndex = '9999';
            document.body.appendChild(toastContainer);
        }
        
        // 創建 toast 元素
        const toastId = 'toast-' + Date.now();
        const toast = document.createElement('div');
        toast.id = toastId;
        toast.className = `toast align-items-center text-white bg-${type} border-0`;
        toast.setAttribute('role', 'alert');
        toast.innerHTML = `
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-${type === 'success' ? 'check-circle' : type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                    ${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
            </div>
        `;
        
        toastContainer.appendChild(toast);
        
        // 初始化並顯示 toast
        const bsToast = new bootstrap.Toast(toast, {
            autohide: true,
            delay: 3000
        });
        bsToast.show();
        
        // 移除已隱藏的 toast
        toast.addEventListener('hidden.bs.toast', () => {
            toast.remove();
        });
    }

    /**
     * 處理透明度變更
     */
    handleOpacityChange(e) {
        const opacity = parseInt(e.target.value) / 100;
        this.watermarkConfig.opacity = opacity;
        this.elements.opacityValue.textContent = e.target.value + '%';
        this.updatePreview();
        this.saveUserPreferences();
        console.log('透明度已變更:', opacity);
    }

    /**
     * 處理字體大小變更
     */
    handleFontsizeChange(e) {
        this.watermarkConfig.fontSize = parseInt(e.target.value);
        this.elements.fontsizeValue.textContent = e.target.value + 'px';
        this.updatePreview();
        this.saveUserPreferences();
        console.log('字體大小已變更:', e.target.value);
    }

    /**
     * 處理位置變更
     */
    handlePositionChange(e) {
        this.watermarkConfig.position = e.target.value;
        this.updatePreview();
        this.saveUserPreferences();
        console.log('位置已變更:', e.target.value);
    }

    /**
     * 更新預覽（帶防抖動）
     */
    updatePreview() {
        if (!this.imageData || !this.canvas || !this.imageData.image) return;
        
        // 防抖動處理 - 避免過度渲染
        if (this.previewUpdateTimeout) {
            clearTimeout(this.previewUpdateTimeout);
        }
        
        this.previewUpdateTimeout = setTimeout(() => {
            this.performPreviewUpdate();
        }, 100); // 100ms 防抖動延遲
    }

    /**
     * 執行預覽更新
     */
    performPreviewUpdate() {
        if (!this.imageData || !this.canvas || !this.imageData.image) return;
        
        try {
            // 顯示更新指示器
            this.showPreviewUpdating(true);
            
            // 清除 canvas
            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);
            
            // 繪製原始圖片 - 使用高品質縮放
            this.context.drawImage(
                this.imageData.image, 
                0, 0, 
                this.imageData.originalWidth, 
                this.imageData.originalHeight,
                0, 0, 
                this.canvas.width, 
                this.canvas.height
            );
            
            // 繪製浮水印
            this.drawWatermark();
            
            // 啟用下載按鈕
            this.elements.downloadBtn.disabled = false;
            
            // 隱藏更新指示器
            this.showPreviewUpdating(false);
            
            // 觸發預覽更新事件
            this.onPreviewUpdated();
            
        } catch (error) {
            console.error('預覽更新失敗:', error);
            this.showError('預覽更新失敗，請重試');
            this.showPreviewUpdating(false);
        }
    }

    /**
     * 顯示預覽更新指示器
     */
    showPreviewUpdating(show) {
        const previewArea = this.elements.previewArea;
        if (!previewArea) return;
        
        let updateIndicator = previewArea.querySelector('.preview-updating');
        
        if (show) {
            if (!updateIndicator) {
                updateIndicator = document.createElement('div');
                updateIndicator.className = 'preview-updating position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center';
                updateIndicator.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
                updateIndicator.style.zIndex = '10';
                updateIndicator.innerHTML = `
                    <div class="text-center">
                        <div class="spinner-border spinner-border-sm text-primary mb-2" role="status">
                            <span class="visually-hidden">更新中...</span>
                        </div>
                        <div class="small text-muted">更新預覽中...</div>
                    </div>
                `;
                previewArea.appendChild(updateIndicator);
            }
            updateIndicator.style.display = 'flex';
        } else {
            if (updateIndicator) {
                updateIndicator.style.display = 'none';
            }
        }
    }

    /**
     * 預覽更新完成回調
     */
    onPreviewUpdated() {
        // 更新預覽狀態指示
        this.updatePreviewStatus();
        
        // 如果是自訂文字模式且文字為空，顯示提示
        if (this.watermarkConfig.type === 'custom' && !this.watermarkConfig.text.trim()) {
            this.showEmptyTextPreviewHint();
        } else {
            this.hideEmptyTextPreviewHint();
        }
        
        console.log('預覽已更新:', {
            類型: this.watermarkConfig.type,
            文字: this.watermarkConfig.text,
            位置: this.watermarkConfig.position,
            透明度: this.watermarkConfig.opacity
        });
    }

    /**
     * 更新預覽狀態指示
     */
    updatePreviewStatus() {
        const previewCard = this.elements.previewArea.closest('.card');
        const cardHeader = previewCard?.querySelector('.card-header h6');
        
        if (!cardHeader) return;
        
        const hasWatermark = this.watermarkConfig.text && this.watermarkConfig.text.trim();
        
        if (hasWatermark) {
            cardHeader.innerHTML = `
                預覽 
                <small class="text-success ms-2">
                    <i class="bi bi-check-circle-fill"></i>
                    已套用浮水印
                </small>
            `;
        } else {
            cardHeader.innerHTML = `
                預覽 
                <small class="text-muted ms-2">
                    <i class="bi bi-info-circle"></i>
                    等待浮水印設定
                </small>
            `;
        }
    }

    /**
     * 顯示空文字預覽提示
     */
    showEmptyTextPreviewHint() {
        const previewArea = this.elements.previewArea;
        let emptyHint = previewArea.querySelector('.empty-preview-hint');
        
        if (!emptyHint) {
            emptyHint = document.createElement('div');
            emptyHint.className = 'empty-preview-hint position-absolute top-50 start-50 translate-middle text-center';
            emptyHint.style.zIndex = '5';
            emptyHint.innerHTML = `
                <div class="text-muted">
                    <i class="bi bi-type fs-1 mb-3"></i>
                    <h6>請輸入浮水印文字</h6>
                    <p class="small mb-0">在左側輸入自訂文字以查看預覽效果</p>
                </div>
            `;
            previewArea.appendChild(emptyHint);
        }
        
        emptyHint.style.display = 'block';
    }

    /**
     * 隱藏空文字預覽提示
     */
    hideEmptyTextPreviewHint() {
        const emptyHint = this.elements.previewArea.querySelector('.empty-preview-hint');
        if (emptyHint) {
            emptyHint.style.display = 'none';
        }
    }

    /**
     * 繪製浮水印
     */
    drawWatermark() {
        const text = this.watermarkConfig.text?.trim();
        
        // 如果沒有文字，不繪製浮水印
        if (!text) {
            console.log('浮水印文字為空，跳過繪製');
            // 清空浮水印邊界
            this.updateWatermarkBounds(0, 0, 0, 0);
            return;
        }
        
        const ctx = this.context;
        
        try {
            // 儲存 Canvas 狀態
            ctx.save();
            
            // 設定字體樣式 - 使用更好的字體堆疊
            const fontFamily = 'Arial, "Microsoft JhengHei", "PingFang TC", "Helvetica Neue", sans-serif';
            ctx.font = `${this.watermarkConfig.fontSize}px ${fontFamily}`;
            ctx.fillStyle = this.watermarkConfig.color;
            ctx.globalAlpha = this.watermarkConfig.opacity;
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            
            // 設定文字渲染品質
            ctx.textRenderingOptimization = 'optimizeQuality';
            
            // 計算文字尺寸
            const textMetrics = ctx.measureText(text);
            const textWidth = textMetrics.width;
            const textHeight = this.watermarkConfig.fontSize;
            
            // 計算位置 - 如果有自訂位置則使用，否則使用預設位置
            let position;
            if (this.watermarkConfig.x !== undefined && this.watermarkConfig.y !== undefined && 
                (this.watermarkConfig.x !== 0 || this.watermarkConfig.y !== 0)) {
                // 使用拖拽設定的自訂位置
                position = { 
                    x: this.watermarkConfig.x + textWidth / 2, 
                    y: this.watermarkConfig.y + textHeight / 2 
                };
            } else {
                // 使用預設位置計算
                position = this.calculateWatermarkPosition(text);
                // 更新配置中的位置（用於拖拽）
                this.watermarkConfig.x = position.x - textWidth / 2;
                this.watermarkConfig.y = position.y - textHeight / 2;
            }
            
            // 檢查位置是否在 Canvas 範圍內
            if (this.isPositionValid(position)) {
                // 添加文字陰影效果（可選）
                if (this.watermarkConfig.addShadow !== false) {
                    ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
                    ctx.shadowBlur = 2;
                    ctx.shadowOffsetX = 1;
                    ctx.shadowOffsetY = 1;
                }
                
                // 繪製文字
                ctx.fillText(text, position.x, position.y);
                
                // 如果需要邊框效果
                if (this.watermarkConfig.addStroke) {
                    ctx.strokeStyle = 'rgba(255, 255, 255, 0.8)';
                    ctx.lineWidth = 1;
                    ctx.strokeText(text, position.x, position.y);
                }
                
                // 更新浮水印邊界資訊（用於拖拽檢測）
                const boundingX = position.x - textWidth / 2;
                const boundingY = position.y - textHeight / 2;
                this.updateWatermarkBounds(boundingX, boundingY, textWidth, textHeight);
                
                console.log('浮水印已繪製:', {
                    文字: text,
                    位置: position,
                    邊界: this.watermarkBounds,
                    字體大小: this.watermarkConfig.fontSize,
                    透明度: this.watermarkConfig.opacity
                });
            } else {
                console.warn('浮水印位置超出 Canvas 範圍:', position);
                // 清空浮水印邊界
                this.updateWatermarkBounds(0, 0, 0, 0);
            }
            
        } catch (error) {
            console.error('浮水印繪製失敗:', error);
            // 清空浮水印邊界
            this.updateWatermarkBounds(0, 0, 0, 0);
        } finally {
            // 恢復 Canvas 狀態
            ctx.restore();
        }
    }

    /**
     * 檢查位置是否有效
     */
    isPositionValid(position) {
        return position.x >= 0 && 
               position.x <= this.canvas.width && 
               position.y >= 0 && 
               position.y <= this.canvas.height;
    }

    /**
     * 計算浮水印位置
     */
    calculateWatermarkPosition(text) {
        const ctx = this.context;
        const textMetrics = ctx.measureText(text);
        const textWidth = textMetrics.width;
        const textHeight = this.watermarkConfig.fontSize;
        
        const padding = 20;
        let x, y;
        
        switch (this.watermarkConfig.position) {
            case 'top-left':
                x = padding + textWidth / 2;
                y = padding + textHeight / 2;
                break;
            case 'top-center':
                x = this.canvas.width / 2;
                y = padding + textHeight / 2;
                break;
            case 'top-right':
                x = this.canvas.width - padding - textWidth / 2;
                y = padding + textHeight / 2;
                break;
            case 'center-left':
                x = padding + textWidth / 2;
                y = this.canvas.height / 2;
                break;
            case 'center':
                x = this.canvas.width / 2;
                y = this.canvas.height / 2;
                break;
            case 'center-right':
                x = this.canvas.width - padding - textWidth / 2;
                y = this.canvas.height / 2;
                break;
            case 'bottom-left':
                x = padding + textWidth / 2;
                y = this.canvas.height - padding - textHeight / 2;
                break;
            case 'bottom-center':
                x = this.canvas.width / 2;
                y = this.canvas.height - padding - textHeight / 2;
                break;
            case 'bottom-right':
            default:
                x = this.canvas.width - padding - textWidth / 2;
                y = this.canvas.height - padding - textHeight / 2;
                break;
        }
        
        return { x, y };
    }

    /**
     * 下載圖片
     */
    downloadImage() {
        if (!this.canvas) return;
        
        try {
            // 創建下載連結
            const link = document.createElement('a');
            link.download = `watermarked-image-${Date.now()}.png`;
            link.href = this.canvas.toDataURL('image/png');
            
            // 觸發下載
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            this.showSuccess('圖片下載成功！');
            console.log('圖片下載完成');
        } catch (error) {
            console.error('下載失敗:', error);
            this.showError('下載失敗，請重試');
        }
    }

    /**
     * 檢查嵌入模式
     */
    checkEmbeddedMode() {
        if (this.isEmbedded) {
            document.body.classList.add('embedded-mode');
            console.log('嵌入模式已啟用');
        }
    }

    /**
     * 載入使用者偏好設定
     */
    loadUserPreferences() {
        try {
            const saved = localStorage.getItem('watermark-preferences');
            if (saved) {
                const preferences = JSON.parse(saved);
                
                // 應用浮水印類型設定
                if (preferences.type !== undefined) {
                    const typeRadio = document.querySelector(`input[name="watermark-type"][value="${preferences.type}"]`);
                    if (typeRadio) {
                        typeRadio.checked = true;
                        this.watermarkConfig.type = preferences.type;
                        this.updateWatermarkTypeVisualState(preferences.type);
                    }
                }
                
                // 應用預設類型設定
                if (preferences.presetType !== undefined && this.elements.presetSelect) {
                    this.elements.presetSelect.value = preferences.presetType;
                    this.watermarkConfig.presetType = preferences.presetType;
                }
                
                // 應用儲存的設定
                if (preferences.opacity !== undefined) {
                    this.elements.opacityRange.value = preferences.opacity * 100;
                    this.watermarkConfig.opacity = preferences.opacity;
                    this.elements.opacityValue.textContent = (preferences.opacity * 100) + '%';
                }
                
                if (preferences.fontSize !== undefined) {
                    this.elements.fontsizeRange.value = preferences.fontSize;
                    this.watermarkConfig.fontSize = preferences.fontSize;
                    this.elements.fontsizeValue.textContent = preferences.fontSize + 'px';
                }
                
                if (preferences.position !== undefined) {
                    const positionRadio = document.querySelector(`input[name="position"][value="${preferences.position}"]`);
                    if (positionRadio) {
                        positionRadio.checked = true;
                        this.watermarkConfig.position = preferences.position;
                    }
                }
                
                // 根據類型顯示對應的選項
                if (this.watermarkConfig.type === 'preset') {
                    this.elements.presetOptions.classList.remove('d-none');
                    this.elements.customOptions.classList.add('d-none');
                } else {
                    this.elements.presetOptions.classList.add('d-none');
                    this.elements.customOptions.classList.remove('d-none');
                }
                
                console.log('使用者偏好設定已載入');
            }
        } catch (error) {
            console.error('載入偏好設定失敗:', error);
        }
    }

    /**
     * 儲存使用者偏好設定
     */
    saveUserPreferences() {
        try {
            const preferences = {
                type: this.watermarkConfig.type,
                presetType: this.watermarkConfig.presetType,
                opacity: this.watermarkConfig.opacity,
                fontSize: this.watermarkConfig.fontSize,
                position: this.watermarkConfig.position
            };
            
            localStorage.setItem('watermark-preferences', JSON.stringify(preferences));
            console.log('使用者偏好設定已儲存');
        } catch (error) {
            console.error('儲存偏好設定失敗:', error);
        }
    }

    /**
     * 顯示載入狀態
     */
    showLoading(show, message = '載入中...') {
        const spinner = this.elements.loadingSpinner;
        const spinnerText = spinner.querySelector('.visually-hidden');
        const loadingMessage = spinner.querySelector('.loading-message');
        
        if (show) {
            // 更新載入訊息
            if (spinnerText) {
                spinnerText.textContent = message;
            }
            if (loadingMessage) {
                loadingMessage.textContent = message;
            }
            
            // 顯示載入動畫
            spinner.classList.remove('d-none');
            spinner.classList.add('fade-in');
            
            // 禁用上傳區域互動
            this.elements.uploadSection.style.pointerEvents = 'none';
            this.elements.uploadSection.style.opacity = '0.6';
            
            console.log('載入狀態:', message);
        } else {
            // 隱藏載入動畫
            spinner.classList.add('d-none');
            spinner.classList.remove('fade-in');
            
            // 恢復上傳區域互動
            this.elements.uploadSection.style.pointerEvents = 'auto';
            this.elements.uploadSection.style.opacity = '1';
            
            console.log('載入完成');
        }
    }

    /**
     * 顯示錯誤訊息
     */
    showError(message) {
        this.showAlert(message, 'danger');
    }

    /**
     * 顯示成功訊息
     */
    showSuccess(message) {
        this.showAlert(message, 'success');
    }

    /**
     * 顯示警告訊息
     */
    showAlert(message, type = 'info') {
        // 移除現有的警告
        const existingAlert = document.querySelector('.alert');
        if (existingAlert) {
            existingAlert.remove();
        }
        
        // 創建新的警告
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.innerHTML = `
            <i class="bi bi-${type === 'danger' ? 'exclamation-triangle' : type === 'success' ? 'check-circle' : 'info-circle'}-fill me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        
        // 插入到頁面頂部
        const container = document.querySelector('.container');
        container.insertBefore(alert, container.firstChild);
        
        // 自動移除
        setTimeout(() => {
            if (alert.parentNode) {
                alert.remove();
            }
        }, 5000);
        
        console.log(`${type.toUpperCase()}: ${message}`);
    }
}

// 當 DOM 載入完成時初始化應用程式
document.addEventListener('DOMContentLoaded', () => {
    window.watermarkApp = new WatermarkApp();
});

// 預設浮水印類型定義
const PRESET_WATERMARKS = {
    'taiwan-id': {
        text: '僅供身分驗證使用',
        fontSize: 20,
        color: '#ff0000',
        opacity: 0.6,
        position: 'center',
        description: '台灣身分證專用浮水印'
    },
    'document-copy': {
        text: '僅供文件備份使用',
        fontSize: 18,
        color: '#0066cc',
        opacity: 0.5,
        position: 'bottom-right',
        description: '文件備份專用浮水印'
    },
    'sample': {
        text: 'SAMPLE',
        fontSize: 32,
        color: '#888888',
        opacity: 0.4,
        position: 'center',
        description: '樣本標記浮水印'
    }
};